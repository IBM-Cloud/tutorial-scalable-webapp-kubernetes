apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline
spec:
  params:
    - name: repository
    - name: branch
    - name: revision
    - name: apikey
    - name: resource-prefix
    - name: resource-group
    - name: region
  workspaces:
  - name: pipeline-pvc
  tasks:
    - name: clone-repo
      taskRef:
        name: git-clone-repo
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: "" # don't pass the branch, we want to checkout a specific commit
        - name: revision
          value: $(params.revision)
        - name: git-credentials-json-file
          value: .git-credentials.json
      workspaces:
      - name: output
        workspace: pipeline-pvc

    - name: deploy-infrastructure
      taskRef:
        name: local-schematics
      runAfter: [clone-repo]
      params:
        - name: resource-group
          value: $(params.resource-group)
        - name: region
          value: $(params.region)
        - name: resource-prefix
          value: $(params.resource-prefix)
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
      workspaces:
      - name: artifacts
        workspace: pipeline-pvc

    - name: get-schematics-outputs
      taskRef:
        name: local-schematics-output
      runAfter: [deploy-infrastructure]
      workspaces:
      - name: artifacts
        workspace: pipeline-pvc

    - name: get-app-code
      taskRef:
        name: local-ibmcloud-cli
      runAfter: [clone-repo]
      params:
        - name: resource-group
          value: $(params.resource-group)
        - name: region
          value: $(params.region)
        - name: script
          value: |
            mkdir -p app
            curl -L https://github.com/IBM-Cloud/kubernetes-node-app/archive/refs/heads/master.zip -o app/kube-node-app.zip
            unzip -q app/kube-node-app.zip -d app
      workspaces:
      - name: artifacts
        workspace: pipeline-pvc

    - name: build-image
      taskRef:
        name: icr-containerize
      runAfter: [get-schematics-outputs, get-app-code]
      params:
        - name: registry-region
          value: $(params.region)
        - name: registry-namespace
          value: $(tasks.get-schematics-outputs.results.registry-namespace)
        - name: image-name
          value: "$(params.resource-prefix)-image"
        - name: resource-group
          value: $(params.resource-group)
        - name: path-to-context
          value: app/kubernetes-node-app-master
        - name: path-to-dockerfile
          value: app/kubernetes-node-app-master
        - name: additional-tags
          value: "v1.0.0"
      workspaces:
      - name: source
        workspace: pipeline-pvc

    - name: deploy-app
      taskRef:
        name: local-ibmcloud-cli
      runAfter: [build-image]
      params:
        - name: resource-group
          value: $(params.resource-group)
        - name: region
          value: $(params.region)
        - name: script
          value: |
            MYCLUSTER="$(tasks.get-schematics-outputs.results.cluster-name)"
            KUBERNETES_NAMESPACE="$(tasks.get-schematics-outputs.results.registry-namespace)"
            MYPROJECT="$(params.resource-prefix)-app"

            ibmcloud ks cluster config --cluster $MYCLUSTER

            if [[ "$KUBERNETES_NAMESPACE" != "default" ]]; then
              kubectl get secret all-icr-io -n default -o yaml | sed "s/default/$KUBERNETES_NAMESPACE/g" | kubectl create -n $KUBERNETES_NAMESPACE -f - || true
              kubectl patch -n $KUBERNETES_NAMESPACE serviceaccount/default -p '{"imagePullSecrets":[{"name": "all-icr-io"}]}' || true
            fi

            cd app/kubernetes-node-app-master

            # deploy the service
            cd chart/kubernetesnodeapp
            helm install $MYPROJECT --namespace $KUBERNETES_NAMESPACE . --set image.repository=$MYREGISTRY/$MYNAMESPACE/$MYPROJECT || true

            # deploy an ingress
            cd ../../
            export INGRESS_SUBDOMAIN=$(ibmcloud ks cluster get --cluster $MYCLUSTER --output json | jq -r '.ingress.hostname')
            export INGRESS_SECRET_NAME=$(ibmcloud ks cluster get --cluster $MYCLUSTER --output json | jq -r '.ingress.secretName')
            ./ingress.sh ibmdomain_https
            kubectl apply -f ingress-ibmdomain.yaml

            sleep 20

            export CURL_HTTP_CODE=$(curl -sL -w "%{http_code}\\n" "https://$MYPROJECT.$INGRESS_SUBDOMAIN/" -o /dev/null)
            echo "CURL HTTP CODE: $CURL_HTTP_CODE"
            if [ $CURL_HTTP_CODE == "200" ]; then 
              echo "The application is successfully running at https://$MYPROJECT.$INGRESS_SUBDOMAIN/"
            fi
      workspaces:
      - name: artifacts
        workspace: pipeline-pvc
