---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: local-schematics-output
spec:
  results:
    - name: cluster-name
    - name: kubernetes-namespace
    - name: registry-namespace
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: ibmcom/pipeline-base-image:2.12
      workingDir: /artifacts
      script: |
        #!/bin/bash
        set -e -o pipefail

        echo -n $(cat /artifacts/workspace-output.json | jq -r '.[0].output_values[0].cluster_name.value') > $(results.cluster-name.path)
        echo -n $(cat /artifacts/workspace-output.json | jq -r '.[0].output_values[0].kubernetes_namespace.value') > $(results.kubernetes-namespace.path)
        echo -n $(cat /artifacts/workspace-output.json | jq -r '.[0].output_values[0].registry_namespace.value') > $(results.registry-namespace.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: local-schematics
spec:
  params:
    - name: resource-group
    - name: region
    - name: resource-prefix
    - name: repository
    - name: branch
    - name: ibmcloud-api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      default: secure-properties
    - name: apikey-secret-key
      default: apikey
    - name: pipeline-debug
      default: "0"
  results:
    - name: workspace-id
    - name: region
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: ibmcom/pipeline-base-image:2.12
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_STAGE_EXECUTION_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: PIPELINE_TRIGGERING_USER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.apikey-secret-key)
        - name: PIPELINE_BLUEMIX_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
      script: |
        #!/bin/bash
        set -e -o pipefail
        if [ $PIPELINE_DEBUG == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        ibmcloud config --check-version false
        if [ "$(params.region)" ]; then
          # if region is in the 'ibm:yp:<region>' just keep the region part
          export IBM_CLOUD_REGION=$(echo "$(params.region)" | awk -F ':' '{print $NF;}')
        else
          export IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
        fi
        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $PIPELINE_BLUEMIX_API_KEY
        if [ "$PIPELINE_BLUEMIX_RESOURCE_GROUP" ]; then
          ibmcloud target -g "$PIPELINE_BLUEMIX_RESOURCE_GROUP"
        fi

        # CREATE OR UPDATE THE SCHEMATICS WORKSPACE
        SCHEMATICS_WORKSPACE_NAME="$(params.resource-prefix)-schematics"
        echo '{
          "name": "'$SCHEMATICS_WORKSPACE_NAME'",
          "type": [
            "terraform_v0.13"
          ],
          "location": "'$IBM_CLOUD_REGION'",
          "description": "",
          "tags": [ "terraform" ],
          "resource_group": "$(params.resource-group)",
          "template_repo":
            {
              "url": "$(params.repository)",
              "branch": "$(params.branch)",
              "full_url": "$(params.repository)/tree/$(params.branch)/terraform",
              "has_uploadedgitrepotar": false
            },
          "template_data": [
            {
              "type": "terraform_v0.13",
              "folder": "terraform",
              "variablestore": [
                {
                  "name": "ibmcloud_api_key",
                  "value": "'$PIPELINE_BLUEMIX_API_KEY'",
                  "secure": true
                },
                {
                  "name": "region",
                  "value": "'$IBM_CLOUD_REGION'"
                },
                {
                  "name": "resource-prefix",
                  "value": "$(params.resource-prefix)"
                },
                {
                  "name": "resource-group",
                  "value": "$(params.resource-group)"
                }
              ]
            }
          ]
        }' > /tmp/workspace-update.json

        SCHEMATICS_WORKSPACE_LIST_JSON=$(ibmcloud schematics workspace list --output json)
        SCHEMATICS_WORKSPACE_ID=$(echo $SCHEMATICS_WORKSPACE_LIST_JSON | jq -r '.workspaces | .[]? | select(.resource_group=="$(params.resource-group)" and .name=="'$SCHEMATICS_WORKSPACE_NAME'") | .id')
        if [[ -z "$SCHEMATICS_WORKSPACE_ID" ]]; then
          echo "Workspace $SCHEMATICS_WORKSPACE_NAME not found"
          WORKSPACE_JSON=$(ibmcloud schematics workspace new --file /tmp/workspace-update.json --output json)
          SCHEMATICS_WORKSPACE_ID=$(echo $WORKSPACE_JSON | jq -r .id)
        else
          echo "Workspace already exists"
          ibmcloud schematics workspace update --id $SCHEMATICS_WORKSPACE_ID --file /tmp/workspace-update.json
        fi

        # WAIT FOR WORKSPACE TO BE INACTIVE
        echo "Waiting for workspace to be INACTIVE..."
        while :
        do
          STATUS=$(ibmcloud terraform workspace get --id $SCHEMATICS_WORKSPACE_ID --output json)
          RET_VAL=$?
          if [ $RET_VAL -ne 0 ]; then
            echo $STATUS
            exit $RET_VAL
          else
            STATUS_VALUE=$(echo $STATUS | jq -r ".status")
            echo -n "."
            if [ "$STATUS_VALUE" = "INACTIVE" ]; then
              break
            else
              echo -n $STATUS_VALUE
            fi
          fi
          # sleep for 10 seconds, while waiting for completion
          sleep 10
        done
        echo "Workspace is ready"

        # APPLY CHANGES
        echo "Running apply for workspace..."
        ACTIVITY=$(ibmcloud terraform apply --id $SCHEMATICS_WORKSPACE_ID --force --json)
        ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
        echo "Waiting for activity ID $ACTIVITY_ID to complete..."
        # poll until status is no longer INPROGRESS, or if there is an error
        while :
        do
          STATUS=$(ibmcloud terraform workspace action --id $SCHEMATICS_WORKSPACE_ID --act-id $ACTIVITY_ID --json)

          RET_VAL=$?
          if [ $RET_VAL -ne 0 ]; then
            echo $STATUS
            exit $RET_VAL
          else
            STATUS_VALUE=$(echo $STATUS | jq -r ".status")
            echo -n "."
            if [ "$STATUS_VALUE" = "FAILED" ]; then 
              ibmcloud terraform logs --id $SCHEMATICS_WORKSPACE_ID --act-id $ACTIVITY_ID
              exit 1
            elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
              break
            fi
          fi
          # sleep for 10 seconds, while waiting for completion
          sleep 10
        done
        echo "Apply complete"
        ibmcloud terraform logs --id $SCHEMATICS_WORKSPACE_ID --act-id $ACTIVITY_ID
        ibmcloud terraform output -id $SCHEMATICS_WORKSPACE_ID --output json > /artifacts/workspace-output.json

        # capture outputs
        echo -n "$SCHEMATICS_WORKSPACE_ID" > $(results.workspace-id.path)
        echo -n "$IBM_CLOUD_REGION" > $(results.region.path)
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
